import Head from 'next/head'
import { useState } from 'react';


export default function Home() {

const [oldNum, setOldNum] = useState('');
const [operand, setOperand] = useState('');
const [result, setResult] = useState(''); 
const [displayResult, setDisplayResult] = useState(''); //this is only for when equals is used, so we can clear oldNum and result, and still show the value.
const [opPressed, setOpPressed] = useState(false);
const [themeState, setThemeState] = useState(1);

// const handleOverflow = () => {
//   if (displayResult.length > 19) {
//     setDisplayResult('OVERFLOW');
//   } else if (oldNum.length > 19)  {
//     setOldNum('OVERFLOW');
//   }
// }


const handleClick = (number) => {
  if(result.length < 18) {
    setResult(result + number);
  }
}

const handleClickZero = () => {
  if (result !== '' && result.length < 18) setResult(result + 0)
}

const resetCalc = () => {
  setResult('');
  setDisplayResult('');
  setOldNum('');
  setOpPressed(false);
}


const handleClickDecimal = () => {
  if (!result.includes(".")) setResult(result + ".")
}

const delCalc = () => {
  setResult(result.slice(0,-1));
}

const handleEquals = () => {
  //when '=' is pressed.
  if (numberPresent(result) && numberPresent(oldNum)) { //cant press equals when there is no other number to calculate against
    if (operand === '+') {
      add(true);
    }
    else if (operand === '-') {
      sub(true);
    }
    else if (operand === 'x') {
      mult(true);
    }
    else if (operand === '/') {
      div(true);
    }

    setOpPressed(false);
    setResult('');
    setOldNum('');
    setOperand('');
  }


}

const calculate = (op) => {
  if (numberPresent(result) || numberPresent(displayResult)) { //cannot do operations initially without there being two values populated.
    if (!opPressed) { //no operator was pressed recently
      if (numberPresent(displayResult) && !numberPresent(result)){ //check to see if we have these numbers present/not present before using an operator
        setOldNum(displayResult)
      } else setOldNum(result);

      setResult('');
      setOperand(op);
      setOpPressed(true);
    } else if (opPressed && numberPresent(result)) { 
      if (operand === '+') {
        add();
      }
      else if (operand === '-') {
        sub();
      }
      else if (operand === 'x') {
        mult();
      }
      else if (operand === '/') {
        div();
      }
      setResult('');
      setOperand(op);
    }
  } 
}
// helper method to check whether the two values are populated

const numberPresent = (value) => {
  let bool = false;
  if (value && value != '.') {
    bool = true 
  } 
  return bool;
}

//if argument is set to one thing it will set the display number, if its not set, it will display to oldNum.
const add = (equals) => {
  if (equals) {
    setDisplayResult(parseFloat(oldNum) + parseFloat(result));
  } else setOldNum(parseFloat(oldNum) + parseFloat(result));
}

const sub = (equals) => {
  if (equals) {
    setDisplayResult(parseFloat(oldNum) - parseFloat(result));
  } else setOldNum(parseFloat(oldNum) - parseFloat(result));
}

const mult = (equals) => {
  if (equals) {
    setDisplayResult(parseFloat(oldNum) * parseFloat(result));
  } else setOldNum(parseFloat(oldNum) * parseFloat(result));
}

const div = (equals) => {
  // if (result === 0) {
  //   setOldNum("Don't do that...");
  //   setResult('');
  // }
  //already impossible to input the number zero first, hahaha!!!!
  if (equals) {
    setDisplayResult(parseFloat(oldNum) / parseFloat(result));
  } else setOldNum(parseFloat(oldNum) / parseFloat(result));
  
}




/*when you press '+', what happens?

edge cases: 1. operands should not work if there is no input (result is either '.' or '').
how to make a function like pressing operands constantly without pressing equals? 
      answer: if oldNum has initially been populated, that means we still have a value waiting to have operations done by other values? correct?
      use an if case checking to see if oldNum is still present (equals has not been pressed and the numbers have not been cleared.)
      basically work like this:
      operand pressed -> check to see if operand is pressed by seeing if oldNum is not blank.
      if oldNum is blank -> set oldNum to the value of result and clear result.
      if oldNum is NOT blank -> do what equals would do: add the result to oldNum, keep result blank. 
*/

const themeStateHandler = (e) => {
  setThemeState(e);
  console.log(e);
}

  return (
    <div>
      <Head>
        <title>Frontend Mentor | Calculator app</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon-32x32.png" />
      </Head>

      <main className="calculator">
        <header className="calc-header">
          <h1>calc</h1>
          <div className="theme">
            <span>THEME</span>
            <div className="theme-buttons">
              {themeState!=1 && <button value={1} className="unselected" onClick={e => themeStateHandler(e.target.value)}></button>}
              {themeState==1 && <button value={1} onClick={e => themeStateHandler(e.target.value)}></button>}

              {themeState!=2 && <button value={2} className="unselected" onClick={e => themeStateHandler(e.target.value)}></button>}
              {themeState==2 && <button value={2} onClick={e => themeStateHandler(e.target.value)}></button>}

              {themeState!=3 && <button value={3} className="unselected" onClick={e => themeStateHandler(e.target.value)}></button>}
              {themeState==3 &&<button value={3} onClick={e => themeStateHandler(e.target.value)}></button>}

            </div>
          </div>
        </header>
        <div className="screen">
          {!result && <p className="screen-text">{oldNum}</p>}
          {result && <p className="screen-text">{result}</p>}
          {!oldNum && !result && <p className="screen-text">{displayResult}</p>}
        </div>
        <div className="keypad">
          <div className="row-1">
            <button className="calc-buttons" value="7" onClick={e => handleClick(e.target.value)}>7</button>
            <button className="calc-buttons" value="8" onClick={e => handleClick(e.target.value)}>8</button>
            <button className="calc-buttons" value="9" onClick={e => handleClick(e.target.value)}>9</button>
            <button className="calc-buttons" id="var-1" onClick={delCalc}>DEL</button>
          </div>
          
          <div className="row-2">
            <button className="calc-buttons" value="4" onClick={e => handleClick(e.target.value)}>4</button>
            <button className="calc-buttons" value="5" onClick={e => handleClick(e.target.value)}>5</button>
            <button className="calc-buttons" value="6" onClick={e => handleClick(e.target.value)}>6</button>
            <button className="calc-buttons" value="+" onClick={e => calculate(e.target.value)}>+</button>
          </div>

          <div className="row-3">
            <button className="calc-buttons" value="1" onClick={e => handleClick(e.target.value)}>1</button>
            <button className="calc-buttons" value="2" onClick={e => handleClick(e.target.value)}>2</button>
            <button className="calc-buttons" value="3" onClick={e => handleClick(e.target.value)}>3</button>
            <button className="calc-buttons" value="-" onClick={e => calculate(e.target.value)}>-</button>
          </div>

          <div className="row-4">
            <button className="calc-buttons" onClick={handleClickDecimal}>.</button>
            <button className="calc-buttons" onClick={handleClickZero}>0</button>
            <button className="calc-buttons" value="/" onClick={e => calculate(e.target.value)}>/</button>
            <button className="calc-buttons" value="x" onClick={e => calculate(e.target.value)}>x</button>
          </div>
          
          <div className="row-5">
            <button className="calc-buttons" id="var-1" onClick={resetCalc}>RESET</button>
            <button className="calc-buttons" id="var-2" onClick={handleEquals}>=</button>

          </div>

        </div>
      </main>

      <footer className="attribution">
        Challenge by <a href="https://www.frontendmentor.io?ref=challenge" target="_blank" rel="noreferrer">Frontend Mentor</a>. 
        Coded by <a href="https://minoo.netlify.app/" target="_blank" rel="noreferrer">Ash</a>.
      </footer>
    </div>
  )
}
